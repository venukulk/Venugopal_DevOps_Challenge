
mkdir deploy/openssl
cd deploy/openssl 
1. Create certificate authority 

openssl req -x509 -sha256 -days 356 -nodes -newkey rsa:2048 -subj "/CN=demo.challenge.local/C=US/L=San Fransisco" -keyout rootCA.key -out rootCA.crt 

or 

MSYS2_ARG_CONV_EXCL='/CN' openssl req -x509 -sha256 -days 356 -nodes -newkey rsa:2048 -subj "/CN=demo.challenge.local/C=US/L=San Fransisco" -keyout rootCA.key -out rootCA.crt

2. server key
openssl genrsa -out server.key 2048


3. Create certificate signing request
cat > csr.conf <<EOF
[ req ]
default_bits = 2048
prompt = no
default_md = sha256
req_extensions = req_ext
distinguished_name = dn

[ dn ]
C = US
ST = California
L = San Fransisco
O = Challenge
OU = Challenge Dev
CN = demo.challenge.local

[ req_ext ]
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = demo.challenge.local
DNS.2 = www.demo.challenge.local

EOF


4. Generate Certificate Signing Request (CSR) Using Server Private Key
openssl req -new -key server.key -out server.csr -config csr.conf

5. Create a external file

cat > cert.conf <<EOF

authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = demo.challenge.local

EOF



6. Generate SSL certificate With self signed CA

openssl x509 -req \
    -in server.csr \
    -CA rootCA.crt -CAkey rootCA.key \
    -CAcreateserial -out server.crt \
    -days 365 \
    -sha256 -extfile cert.conf
	
7. Do base 64 encoding to add certifcate to kubernetes secret
cat server.crt | base64 -w 0
cat server.key |  base64 -w 0



8. For self signed certificate 
curl --cacert server.crt https://demo.challenge.local/hello --resolve demo.challenge.local:443:52.205.128.58